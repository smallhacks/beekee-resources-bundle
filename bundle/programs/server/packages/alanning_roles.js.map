{"version":3,"sources":["meteor://ðŸ’»app/packages/alanning:roles/roles/roles_common.js","meteor://ðŸ’»app/packages/alanning:roles/roles/roles_server.js"],"names":["Meteor","roles","Mongo","Collection","roleAssignment","Roles","getGroupsForUserDeprecationWarning","Object","assign","GLOBAL_GROUP","createRole","roleName","options","_checkRoleName","unlessExists","result","upsert","_id","$setOnInsert","children","insertedId","Error","deleteRole","inheritedRoles","remove","_getParentRoleNames","findOne","find","$in","fetch","forEach","r","update","$pull","_getInheritedRoleNames","$set","map","r2","multi","length","renameRole","oldName","newName","role","count","insert","addRolesToParent","rolesNames","parentName","Array","isArray","_addRoleToParent","includes","$ne","$push","$each","removeRolesFromParent","_removeRoleFromParent","fields","addUsersToRoles","users","id","_normalizeOptions","_checkScopeName","scope","ifExists","user","_addUserToRole","setUserRoles","anyScope","selector","userId","res","parentRoles","Set","parentRole","add","delete","nestedRoles","removeUsersFromRoles","_removeUserFromRole","userIsInRole","filter","some","limit","getRolesForUser","fullObjects","onlyAssigned","onlyScoped","push","reduce","rev","current","concat","getAllRoles","queryOptions","sort","getUsersInRole","ids","getUserAssignmentsForRole","a","_getUsersInRoleCursor","getGroupsForUser","console","warn","getScopesForUser","scopes","obi","renameScope","removeScope","name","trim","isParentOf","parentRoleName","childRoleName","rolesToCheck","pop","undefined","_normalizeScopeName","scopeName","_ensureIndex","publish","loggedInUserId","ready","_isNewRole","_isOldRole","_isNewField","_isOldField","_convertToNewRole","oldRole","_convertToOldRole","newRole","_convertToNewField","oldRoles","convertUnderscoresToDots","index","assigned","entries","group","rolesArray","replace","_convertToOldField","newRoles","usingGroups","userRole","__global_roles__","_defaultUpdateUser","_defaultUpdateRole","_dropCollectionIndex","collection","indexName","_dropIndex","e","test","err","errmsg","_forwardMigrate","updateUser","updateRole","cursor","_forwardMigrate2","userSelector","$unset","_backwardMigrate","_backwardMigrate2","assignmentSelector","currentRole","inheritedRole","currentInheritedRole"],"mappings":"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","file":"/packages/alanning_roles.js","sourcesContent":["/* global Meteor, Roles, Mongo */\n\n/**\n * Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n *\n * Roles are accessible throgh `Meteor.roles` collection and documents consist of:\n *  - `_id`: role name\n *  - `children`: list of subdocuments:\n *    - `_id`\n *\n * Children list elements are subdocuments so that they can be easier extended in the future or by plugins.\n *\n * Roles can have multiple parents and can be children (subroles) of multiple roles.\n *\n * Example: `{_id: 'admin', children: [{_id: 'editor'}]}`\n *\n * The assignment of a role to a user is stored in a collection, accessible through `Meteor.roleAssignment`.\n * It's documents consist of\n *  - `_id`: Internal MongoDB id\n *  - `role`: A role object which got assigned. Usually only contains the `_id` property\n *  - `user`: A user object, usually only contains the `_id` property\n *  - `scope`: scope name\n *  - `inheritedRoles`: A list of all the roles objects inherited by the assigned role.\n *\n * @module Roles\n */\nif (!Meteor.roles) {\n  Meteor.roles = new Mongo.Collection('roles')\n}\n\nif (!Meteor.roleAssignment) {\n  Meteor.roleAssignment = new Mongo.Collection('role-assignment')\n}\n\n/**\n * @class Roles\n */\nif (typeof Roles === 'undefined') {\n  Roles = {} // eslint-disable-line no-global-assign\n}\n\nvar getGroupsForUserDeprecationWarning = false\n\nObject.assign(Roles, {\n\n  /**\n   * Used as a global group (now scope) name. Not used anymore.\n   *\n   * @property GLOBAL_GROUP\n   * @static\n   * @deprecated\n   */\n  GLOBAL_GROUP: null,\n\n  /**\n   * Create a new role.\n   *\n   * @method createRole\n   * @param {String} roleName Name of role.\n   * @param {Object} [options] Options:\n   *   - `unlessExists`: if `true`, exception will not be thrown in the role already exists\n   * @return {String} ID of the new role or null.\n   * @static\n   */\n  createRole: function (roleName, options) {\n    Roles._checkRoleName(roleName)\n\n    options = Object.assign({\n      unlessExists: false\n    }, options)\n\n    var result = Meteor.roles.upsert({ _id: roleName }, { $setOnInsert: { children: [] } })\n\n    if (!result.insertedId) {\n      if (options.unlessExists) return null\n      throw new Error('Role \\'' + roleName + '\\' already exists.')\n    }\n\n    return result.insertedId\n  },\n\n  /**\n   * Delete an existing role.\n   *\n   * If the role is set for any user, it is automatically unset.\n   *\n   * @method deleteRole\n   * @param {String} roleName Name of role.\n   * @static\n   */\n  deleteRole: function (roleName) {\n    var roles\n    var inheritedRoles\n\n    Roles._checkRoleName(roleName)\n\n    // Remove all assignments\n    Meteor.roleAssignment.remove({\n      'role._id': roleName\n    })\n\n    do {\n      // For all roles who have it as a dependency ...\n      roles = Roles._getParentRoleNames(Meteor.roles.findOne({ _id: roleName }))\n\n      Meteor.roles.find({ _id: { $in: roles } }).fetch().forEach(r => {\n        Meteor.roles.update({\n          _id: r._id\n        }, {\n          $pull: {\n            children: {\n              _id: roleName\n            }\n          }\n        })\n\n        inheritedRoles = Roles._getInheritedRoleNames(Meteor.roles.findOne({ _id: r._id }))\n        Meteor.roleAssignment.update({\n          'role._id': r._id\n        }, {\n          $set: {\n            inheritedRoles: [r._id, ...inheritedRoles].map(r2 => ({ _id: r2 }))\n          }\n        }, { multi: true })\n      })\n    } while (roles.length > 0)\n\n    // And finally remove the role itself\n    Meteor.roles.remove({ _id: roleName })\n  },\n\n  /**\n   * Rename an existing role.\n   *\n   * @method renameRole\n   * @param {String} oldName Old name of a role.\n   * @param {String} newName New name of a role.\n   * @static\n   */\n  renameRole: function (oldName, newName) {\n    var role\n    var count\n\n    Roles._checkRoleName(oldName)\n    Roles._checkRoleName(newName)\n\n    if (oldName === newName) return\n\n    role = Meteor.roles.findOne({ _id: oldName })\n\n    if (!role) {\n      throw new Error('Role \\'' + oldName + '\\' does not exist.')\n    }\n\n    role._id = newName\n\n    Meteor.roles.insert(role)\n\n    do {\n      count = Meteor.roleAssignment.update({\n        'role._id': oldName\n      }, {\n        $set: {\n          'role._id': newName\n        }\n      }, { multi: true })\n    } while (count > 0)\n\n    do {\n      count = Meteor.roleAssignment.update({\n        'inheritedRoles._id': oldName\n      }, {\n        $set: {\n          'inheritedRoles.$._id': newName\n        }\n      }, { multi: true })\n    } while (count > 0)\n\n    do {\n      count = Meteor.roles.update({\n        'children._id': oldName\n      }, {\n        $set: {\n          'children.$._id': newName\n        }\n      }, { multi: true })\n    } while (count > 0)\n\n    Meteor.roles.remove({ _id: oldName })\n  },\n\n  /**\n   * Add role parent to roles.\n   *\n   * Previous parents are kept (role can have multiple parents). For users which have the\n   * parent role set, new subroles are added automatically.\n   *\n   * @method addRolesToParent\n   * @param {Array|String} rolesNames Name(s) of role(s).\n   * @param {String} parentName Name of parent role.\n   * @static\n   */\n  addRolesToParent: function (rolesNames, parentName) {\n    // ensure arrays\n    if (!Array.isArray(rolesNames)) rolesNames = [rolesNames]\n\n    rolesNames.forEach(function (roleName) {\n      Roles._addRoleToParent(roleName, parentName)\n    })\n  },\n\n  /**\n   * @method _addRoleToParent\n   * @param {String} roleName Name of role.\n   * @param {String} parentName Name of parent role.\n   * @private\n   * @static\n   */\n  _addRoleToParent: function (roleName, parentName) {\n    var role\n    var count\n\n    Roles._checkRoleName(roleName)\n    Roles._checkRoleName(parentName)\n\n    // query to get role's children\n    role = Meteor.roles.findOne({ _id: roleName })\n\n    if (!role) {\n      throw new Error('Role \\'' + roleName + '\\' does not exist.')\n    }\n\n    // detect cycles\n    if (Roles._getInheritedRoleNames(role).includes(parentName)) {\n      throw new Error('Roles \\'' + roleName + '\\' and \\'' + parentName + '\\' would form a cycle.')\n    }\n\n    count = Meteor.roles.update({\n      _id: parentName,\n      'children._id': {\n        $ne: role._id\n      }\n    }, {\n      $push: {\n        children: {\n          _id: role._id\n        }\n      }\n    })\n\n    // if there was no change, parent role might not exist, or role is\n    // already a subrole; in any case we do not have anything more to do\n    if (!count) return\n\n    Meteor.roleAssignment.update({\n      'inheritedRoles._id': parentName\n    }, {\n      $push: {\n        inheritedRoles: { $each: [role._id, ...Roles._getInheritedRoleNames(role)].map(r => ({ _id: r })) }\n      }\n    }, { multi: true })\n  },\n\n  /**\n   * Remove role parent from roles.\n   *\n   * Other parents are kept (role can have multiple parents). For users which have the\n   * parent role set, removed subrole is removed automatically.\n   *\n   * @method removeRolesFromParent\n   * @param {Array|String} rolesNames Name(s) of role(s).\n   * @param {String} parentName Name of parent role.\n   * @static\n   */\n  removeRolesFromParent: function (rolesNames, parentName) {\n    // ensure arrays\n    if (!Array.isArray(rolesNames)) rolesNames = [rolesNames]\n\n    rolesNames.forEach(function (roleName) {\n      Roles._removeRoleFromParent(roleName, parentName)\n    })\n  },\n\n  /**\n   * @method _removeRoleFromParent\n   * @param {String} roleName Name of role.\n   * @param {String} parentName Name of parent role.\n   * @private\n   * @static\n   */\n  _removeRoleFromParent: function (roleName, parentName) {\n    Roles._checkRoleName(roleName)\n    Roles._checkRoleName(parentName)\n\n    // check for role existence\n    // this would not really be needed, but we are trying to match addRolesToParent\n    let role = Meteor.roles.findOne({ _id: roleName }, { fields: { _id: 1 } })\n\n    if (!role) {\n      throw new Error('Role \\'' + roleName + '\\' does not exist.')\n    }\n\n    const count = Meteor.roles.update({\n      _id: parentName\n    }, {\n      $pull: {\n        children: {\n          _id: role._id\n        }\n      }\n    })\n\n    // if there was no change, parent role might not exist, or role was\n    // already not a subrole; in any case we do not have anything more to do\n    if (!count) return\n\n    // For all roles who have had it as a dependency ...\n    const roles = [...Roles._getParentRoleNames(Meteor.roles.findOne({ _id: parentName })), parentName]\n\n    Meteor.roles.find({ _id: { $in: roles } }).fetch().forEach(r => {\n      const inheritedRoles = Roles._getInheritedRoleNames(Meteor.roles.findOne({ _id: r._id }))\n      Meteor.roleAssignment.update({\n        'role._id': r._id,\n        'inheritedRoles._id': role._id\n      }, {\n        $set: {\n          inheritedRoles: [r._id, ...inheritedRoles].map(r2 => ({ _id: r2 }))\n        }\n      }, { multi: true })\n    })\n  },\n\n  /**\n   * Add users to roles.\n   *\n   * Adds roles to existing roles for each user.\n   *\n   * @example\n   *     Roles.addUsersToRoles(userId, 'admin')\n   *     Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')\n   *     Roles.addUsersToRoles([user1, user2], ['user','editor'])\n   *     Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *\n   * @method addUsersToRoles\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  addUsersToRoles: function (users, roles, options) {\n    var id\n\n    if (!users) throw new Error('Missing \\'users\\' param.')\n    if (!roles) throw new Error('Missing \\'roles\\' param.')\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      ifExists: false\n    }, options)\n\n    users.forEach(function (user) {\n      if (typeof user === 'object') {\n        id = user._id\n      } else {\n        id = user\n      }\n\n      roles.forEach(function (role) {\n        Roles._addUserToRole(id, role, options)\n      })\n    })\n  },\n\n  /**\n   * Set users' roles.\n   *\n   * Replaces all existing roles with a new set of roles.\n   *\n   * @example\n   *     Roles.setUserRoles(userId, 'admin')\n   *     Roles.setUserRoles(userId, ['view-secrets'], 'example.com')\n   *     Roles.setUserRoles([user1, user2], ['user','editor'])\n   *     Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n   *\n   * @method setUserRoles\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if `true`, remove all roles the user has, of any scope, if `false`, only the one in the same scope\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  setUserRoles: function (users, roles, options) {\n    var id\n\n    if (!users) throw new Error('Missing \\'users\\' param.')\n    if (!roles) throw new Error('Missing \\'roles\\' param.')\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      ifExists: false,\n      anyScope: false\n    }, options)\n\n    users.forEach(function (user) {\n      if (typeof user === 'object') {\n        id = user._id\n      } else {\n        id = user\n      }\n      // we first clear all roles for the user\n      const selector = { 'user._id': id }\n      if (!options.anyScope) {\n        selector.scope = options.scope\n      }\n\n      Meteor.roleAssignment.remove(selector)\n\n      // and then add all\n      roles.forEach(function (role) {\n        Roles._addUserToRole(id, role, options)\n      })\n    })\n  },\n\n  /**\n   * Add one user to one role.\n   *\n   * @method _addUserToRole\n   * @param {String} userId The user ID.\n   * @param {String} roleName Name of the role to add the user to. The role have to exist.\n   * @param {Object} options Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `ifExists`: if `true`, do not throw an exception if the role does not exist\n   * @private\n   * @static\n   */\n  _addUserToRole: function (userId, roleName, options) {\n    Roles._checkRoleName(roleName)\n    Roles._checkScopeName(options.scope)\n\n    if (!userId) {\n      return\n    }\n\n    const role = Meteor.roles.findOne({ _id: roleName }, { fields: { children: 1 } })\n\n    if (!role) {\n      if (options.ifExists) {\n        return []\n      } else {\n        throw new Error('Role \\'' + roleName + '\\' does not exist.')\n      }\n    }\n\n    // This might create duplicates, because we don't have a unique index, but that's all right. In case there are two, withdrawing the role will effectively kill them both.\n    const res = Meteor.roleAssignment.upsert({\n      'user._id': userId,\n      'role._id': roleName,\n      scope: options.scope\n    }, {\n      $setOnInsert: {\n        user: { _id: userId },\n        role: { _id: roleName },\n        scope: options.scope\n      }\n    })\n\n    if (res.insertedId) {\n      Meteor.roleAssignment.update({ _id: res.insertedId }, {\n        $set: {\n          inheritedRoles: [roleName, ...Roles._getInheritedRoleNames(role)].map(r => ({ _id: r }))\n        }\n      })\n    }\n\n    return res\n  },\n\n  /**\n   * Returns an array of role names the given role name is a child of.\n   *\n   * @example\n   *     Roles._getParentRoleNames({ _id: 'admin', children; [] })\n   *\n   * @method _getParentRoleNames\n   * @param {object} role The role object\n   * @private\n   * @static\n   */\n  _getParentRoleNames: function (role) {\n    var parentRoles\n\n    if (!role) {\n      return []\n    }\n\n    parentRoles = new Set([role._id])\n\n    parentRoles.forEach(roleName => {\n      Meteor.roles.find({ 'children._id': roleName }).fetch().forEach(parentRole => {\n        parentRoles.add(parentRole._id)\n      })\n    })\n\n    parentRoles.delete(role._id)\n\n    return [...parentRoles]\n  },\n\n  /**\n   * Returns an array of role names the given role name is a parent of.\n   *\n   * @example\n   *     Roles._getInheritedRoleNames({ _id: 'admin', children; [] })\n   *\n   * @method _getInheritedRoleNames\n   * @param {object} role The role object\n   * @private\n   * @static\n   */\n  _getInheritedRoleNames: function (role) {\n    const inheritedRoles = new Set()\n    const nestedRoles = new Set([role])\n\n    nestedRoles.forEach(r => {\n      const roles = Meteor.roles.find({ _id: { $in: r.children.map(r => r._id) } }, { fields: { children: 1 } }).fetch()\n\n      roles.forEach(r2 => {\n        inheritedRoles.add(r2._id)\n        nestedRoles.add(r2)\n      })\n    })\n\n    return [...inheritedRoles]\n  },\n\n  /**\n   * Remove users from assigned roles.\n   *\n   * @example\n   *     Roles.removeUsersFromRoles(userId, 'admin')\n   *     Roles.removeUsersFromRoles([userId, user2], ['editor'])\n   *     Roles.removeUsersFromRoles(userId, ['user'], 'group1')\n   *\n   * @method removeUsersFromRoles\n   * @param {Array|String} users User ID(s) or object(s) with an `_id` field.\n   * @param {Array|String} roles Name(s) of roles to add users to. Roles have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @static\n   */\n  removeUsersFromRoles: function (users, roles, options) {\n    if (!users) throw new Error('Missing \\'users\\' param.')\n    if (!roles) throw new Error('Missing \\'roles\\' param.')\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure arrays\n    if (!Array.isArray(users)) users = [users]\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    users.forEach(function (user) {\n      if (!user) return\n\n      roles.forEach(function (role) {\n        let id\n        if (typeof user === 'object') {\n          id = user._id\n        } else {\n          id = user\n        }\n\n        Roles._removeUserFromRole(id, role, options)\n      })\n    })\n  },\n\n  /**\n   * Remove one user from one role.\n   *\n   * @method _removeUserFromRole\n   * @param {String} userId The user ID.\n   * @param {String} roleName Name of the role to add the user to. The role have to exist.\n   * @param {Object} options Options:\n   *   - `scope`: name of the scope, or `null` for the global role\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   * @private\n   * @static\n   */\n  _removeUserFromRole: function (userId, roleName, options) {\n    Roles._checkRoleName(roleName)\n    Roles._checkScopeName(options.scope)\n\n    if (!userId) return\n\n    const selector = {\n      'user._id': userId,\n      'role._id': roleName\n    }\n\n    if (!options.anyScope) {\n      selector.scope = options.scope\n    }\n\n    Meteor.roleAssignment.remove(selector)\n  },\n\n  /**\n   * Check if user has specified roles.\n   *\n   * @example\n   *     // global roles\n   *     Roles.userIsInRole(user, 'admin')\n   *     Roles.userIsInRole(user, ['admin','editor'])\n   *     Roles.userIsInRole(userId, 'admin')\n   *     Roles.userIsInRole(userId, ['admin','editor'])\n   *\n   *     // scope roles (global roles are still checked)\n   *     Roles.userIsInRole(user, 'admin', 'group1')\n   *     Roles.userIsInRole(userId, ['admin','editor'], 'group1')\n   *     Roles.userIsInRole(userId, ['admin','editor'], {scope: 'group1'})\n   *\n   * @method userIsInRole\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Array|String} roles Name of role or an array of roles to check against. If array,\n   *                             will return `true` if user is in _any_ role.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope; if supplied, limits check to just that scope\n   *     the user's global roles will always be checked whether scope is specified or not\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Boolean} `true` if user is in _any_ of the target roles\n   * @static\n   */\n  userIsInRole: function (user, roles, options) {\n    var id\n    var selector\n\n    options = Roles._normalizeOptions(options)\n\n    // ensure array to simplify code\n    if (!Array.isArray(roles)) roles = [roles]\n\n    roles = roles.filter(r => r != null)\n\n    if (!roles.length) return false\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      anyScope: false\n    }, options)\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return false\n\n    selector = {\n      'user._id': id\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope, null] }\n    }\n\n    return roles.some((roleName) => {\n      selector['inheritedRoles._id'] = roleName\n\n      return Meteor.roleAssignment.find(selector, { limit: 1 }).count() > 0\n    })\n  },\n\n  /**\n   * Retrieve user's roles.\n   *\n   * @method getRolesForUser\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of scope to provide roles for; if not specified, global roles are returned\n   *   - `anyScope`: if set, role can be in any scope (`scope` and `onlyAssigned` options are ignored)\n   *   - `onlyScoped`: if set, only roles in the specified scope are returned\n   *   - `onlyAssigned`: return only assigned roles and not automatically inferred (like subroles)\n   *   - `fullObjects`: return full roles objects (`true`) or just names (`false`) (`onlyAssigned` option is ignored) (default `false`)\n   *     If you have a use-case for this option, please file a feature-request. You shouldn't need to use it as it's\n   *     result strongly dependant on the internal data structure of this plugin.\n   *\n   * Alternatively, it can be a scope name string.\n   * @return {Array} Array of user's roles, unsorted.\n   * @static\n   */\n  getRolesForUser: function (user, options) {\n    var id\n    var selector\n    var filter\n    var roles\n\n    options = Roles._normalizeOptions(options)\n\n    Roles._checkScopeName(options.scope)\n\n    options = Object.assign({\n      fullObjects: false,\n      onlyAssigned: false,\n      anyScope: false,\n      onlyScoped: false\n    }, options)\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return []\n\n    selector = {\n      'user._id': id\n    }\n\n    filter = {\n      fields: { 'inheritedRoles._id': 1 }\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope] }\n\n      if (!options.onlyScoped) {\n        selector.scope.$in.push(null)\n      }\n    }\n\n    if (options.onlyAssigned) {\n      delete filter.fields['inheritedRoles._id']\n      filter.fields['role._id'] = 1\n    }\n\n    if (options.fullObjects) {\n      delete filter.fields\n    }\n\n    roles = Meteor.roleAssignment.find(selector, filter).fetch()\n\n    if (options.fullObjects) {\n      return roles\n    }\n\n    return [...new Set(roles.map(r => r.inheritedRoles || [r.role]).reduce((rev, current) => rev.concat(current), []).map(r => r._id))]\n  },\n\n  /**\n   * Retrieve cursor of all existing roles.\n   *\n   * @method getAllRoles\n   * @param {Object} [queryOptions] Options which are passed directly\n   *                                through to `Meteor.roles.find(query, options)`.\n   * @return {Cursor} Cursor of existing roles.\n   * @static\n   */\n  getAllRoles: function (queryOptions) {\n    queryOptions = queryOptions || { sort: { _id: 1 } }\n\n    return Meteor.roles.find({}, queryOptions)\n  },\n\n  /**\n   * Retrieve all users who are in target role.\n   *\n   * Options:\n   *\n   * @method getUsersInRole\n   * @param {Array|String} roles Name of role or an array of roles. If array, users\n   *                             returned will have at least one of the roles\n   *                             specified but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *   - `onlyScoped`: if set, only roles in the specified scope are returned\n   *   - `queryOptions`: options which are passed directly\n   *     through to `Meteor.users.find(query, options)`\n   *\n   * Alternatively, it can be a scope name string.\n   * @param {Object} [queryOptions] Options which are passed directly\n   *                                through to `Meteor.users.find(query, options)`\n   * @return {Cursor} Cursor of users in roles.\n   * @static\n   */\n  getUsersInRole: function (roles, options, queryOptions) {\n    var ids\n\n    ids = Roles.getUserAssignmentsForRole(roles, options).fetch().map(a => a.user._id)\n\n    return Meteor.users.find({ _id: { $in: ids } }, ((options && options.queryOptions) || queryOptions) || {})\n  },\n\n  /**\n   * Retrieve all assignments of a user which are for the target role.\n   *\n   * Options:\n   *\n   * @method getUserAssignmentsForRole\n   * @param {Array|String} roles Name of role or an array of roles. If array, users\n   *                             returned will have at least one of the roles\n   *                             specified but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *   - `queryOptions`: options which are passed directly\n   *     through to `Meteor.roleAssignment.find(query, options)`\n\n   * Alternatively, it can be a scope name string.\n   * @return {Cursor} Cursor of user assignments for roles.\n   * @static\n   */\n  getUserAssignmentsForRole: function (roles, options) {\n    options = Roles._normalizeOptions(options)\n\n    options = Object.assign({\n      anyScope: false,\n      queryOptions: {}\n    }, options)\n\n    return Roles._getUsersInRoleCursor(roles, options, options.queryOptions)\n  },\n\n  /**\n   * @method _getUsersInRoleCursor\n   * @param {Array|String} roles Name of role or an array of roles. If array, ids of users are\n   *                             returned which have at least one of the roles\n   *                             assigned but need not have _all_ roles.\n   *                             Roles do not have to exist.\n   * @param {Object|String} [options] Options:\n   *   - `scope`: name of the scope to restrict roles to; user's global\n   *     roles will also be checked\n   *   - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n   *\n   * Alternatively, it can be a scope name string.\n   * @param {Object} [filter] Options which are passed directly\n   *                                through to `Meteor.roleAssignment.find(query, options)`\n   * @return {Object} Cursor to the assignment documents\n   * @private\n   * @static\n   */\n  _getUsersInRoleCursor: function (roles, options, filter) {\n    var selector\n\n    options = Roles._normalizeOptions(options)\n\n    options = Object.assign({\n      anyScope: false,\n      onlyScoped: false\n    }, options)\n\n    // ensure array to simplify code\n    if (!Array.isArray(roles)) roles = [roles]\n\n    Roles._checkScopeName(options.scope)\n\n    filter = Object.assign({\n      fields: { 'user._id': 1 }\n    }, filter)\n\n    selector = {\n      'inheritedRoles._id': { $in: roles }\n    }\n\n    if (!options.anyScope) {\n      selector.scope = { $in: [options.scope] }\n\n      if (!options.onlyScoped) {\n        selector.scope.$in.push(null)\n      }\n    }\n\n    return Meteor.roleAssignment.find(selector, filter)\n  },\n\n  /**\n   * Deprecated. Use `getScopesForUser` instead.\n   *\n   * @method getGroupsForUser\n   * @static\n   * @deprecated\n   */\n  getGroupsForUser: function (...args) {\n    if (!getGroupsForUserDeprecationWarning) {\n      getGroupsForUserDeprecationWarning = true\n      console && console.warn('getGroupsForUser has been deprecated. Use getScopesForUser instead.')\n    }\n\n    return Roles.getScopesForUser(...args)\n  },\n\n  /**\n   * Retrieve users scopes, if any.\n   *\n   * @method getScopesForUser\n   * @param {String|Object} user User ID or an actual user object.\n   * @param {Array|String} [roles] Name of roles to restrict scopes to.\n   *\n   * @return {Array} Array of user's scopes, unsorted.\n   * @static\n   */\n  getScopesForUser: function (user, roles) {\n    var scopes\n    var id\n\n    if (roles && !Array.isArray(roles)) roles = [roles]\n\n    if (user && typeof user === 'object') {\n      id = user._id\n    } else {\n      id = user\n    }\n\n    if (!id) return []\n\n    const selector = {\n      'user._id': id,\n      scope: { $ne: null }\n    }\n\n    if (roles) {\n      selector['inheritedRoles._id'] = { $in: roles }\n    }\n\n    scopes = Meteor.roleAssignment.find(selector, { fields: { scope: 1 } }).fetch().map(obi => obi.scope)\n\n    return [...new Set(scopes)]\n  },\n\n  /**\n   * Rename a scope.\n   *\n   * Roles assigned with a given scope are changed to be under the new scope.\n   *\n   * @method renameScope\n   * @param {String} oldName Old name of a scope.\n   * @param {String} newName New name of a scope.\n   * @static\n   */\n  renameScope: function (oldName, newName) {\n    var count\n\n    Roles._checkScopeName(oldName)\n    Roles._checkScopeName(newName)\n\n    if (oldName === newName) return\n\n    do {\n      count = Meteor.roleAssignment.update({\n        scope: oldName\n      }, {\n        $set: {\n          scope: newName\n        }\n      }, { multi: true })\n    } while (count > 0)\n  },\n\n  /**\n   * Remove a scope.\n   *\n   * Roles assigned with a given scope are removed.\n   *\n   * @method removeScope\n   * @param {String} name The name of a scope.\n   * @static\n   */\n  removeScope: function (name) {\n    Roles._checkScopeName(name)\n\n    Meteor.roleAssignment.remove({ scope: name })\n  },\n\n  /**\n   * Throw an exception if `roleName` is an invalid role name.\n   *\n   * @method _checkRoleName\n   * @param {String} roleName A role name to match against.\n   * @private\n   * @static\n   */\n  _checkRoleName: function (roleName) {\n    if (!roleName || typeof roleName !== 'string' || roleName.trim() !== roleName) {\n      throw new Error('Invalid role name \\'' + roleName + '\\'.')\n    }\n  },\n\n  /**\n   * Find out if a role is an ancestor of another role.\n   *\n   * WARNING: If you check this on the client, please make sure all roles are published.\n   *\n   * @method isParentOf\n   * @param {String} parentRoleName The role you want to research.\n   * @param {String} childRoleName The role you expect to be among the children of parentRoleName.\n   * @static\n   */\n  isParentOf: function (parentRoleName, childRoleName) {\n    if (parentRoleName === childRoleName) {\n      return true\n    }\n\n    if (parentRoleName == null || childRoleName == null) {\n      return false\n    }\n\n    Roles._checkRoleName(parentRoleName)\n    Roles._checkRoleName(childRoleName)\n\n    var rolesToCheck = [parentRoleName]\n    while (rolesToCheck.length !== 0) {\n      var roleName = rolesToCheck.pop()\n\n      if (roleName === childRoleName) {\n        return true\n      }\n\n      var role = Meteor.roles.findOne({ _id: roleName })\n\n      // This should not happen, but this is a problem to address at some other time.\n      if (!role) continue\n\n      rolesToCheck = rolesToCheck.concat(role.children.map(r => r._id))\n    }\n\n    return false\n  },\n\n  /**\n   * Normalize options.\n   *\n   * @method _normalizeOptions\n   * @param {Object} options Options to normalize.\n   * @return {Object} Normalized options.\n   * @private\n   * @static\n   */\n  _normalizeOptions: function (options) {\n    options = options === undefined ? {} : options\n\n    if (options === null || typeof options === 'string') {\n      options = { scope: options }\n    }\n\n    options.scope = Roles._normalizeScopeName(options.scope)\n\n    return options\n  },\n\n  /**\n   * Normalize scope name.\n   *\n   * @method _normalizeScopeName\n   * @param {String} scopeName A scope name to normalize.\n   * @return {String} Normalized scope name.\n   * @private\n   * @static\n   */\n  _normalizeScopeName: function (scopeName) {\n    // map undefined and null to null\n    if (scopeName == null) {\n      return null\n    } else {\n      return scopeName\n    }\n  },\n\n  /**\n   * Throw an exception if `scopeName` is an invalid scope name.\n   *\n   * @method _checkRoleName\n   * @param {String} scopeName A scope name to match against.\n   * @private\n   * @static\n   */\n  _checkScopeName: function (scopeName) {\n    if (scopeName === null) return\n\n    if (!scopeName || typeof scopeName !== 'string' || scopeName.trim() !== scopeName) {\n      throw new Error('Invalid scope name \\'' + scopeName + '\\'.')\n    }\n  }\n})\n","/* global Meteor, Roles */\n\nMeteor.roleAssignment._ensureIndex({ 'user._id': 1, 'inheritedRoles._id': 1, scope: 1 })\nMeteor.roleAssignment._ensureIndex({ 'user._id': 1, 'role._id': 1, scope: 1 })\nMeteor.roleAssignment._ensureIndex({ 'role._id': 1 })\nMeteor.roleAssignment._ensureIndex({ scope: 1, 'user._id': 1, 'inheritedRoles._id': 1 }) // Adding userId and roleId might speed up other queries depending on the first index\nMeteor.roleAssignment._ensureIndex({ 'inheritedRoles._id': 1 })\n\nMeteor.roles._ensureIndex({ 'children._id': 1 })\n\n/*\n * Publish logged-in user's roles so client-side checks can work.\n *\n * Use a named publish function so clients can check `ready()` state.\n */\nMeteor.publish('_roles', function () {\n  var loggedInUserId = this.userId\n  var fields = { roles: 1 }\n\n  if (!loggedInUserId) {\n    this.ready()\n    return\n  }\n\n  return Meteor.users.find(\n    { _id: loggedInUserId },\n    { fields: fields }\n  )\n})\n\nObject.assign(Roles, {\n  /**\n   * @method _isNewRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewRole: function (role) {\n    return !('name' in role) && 'children' in role\n  },\n\n  /**\n   * @method _isOldRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldRole: function (role) {\n    return 'name' in role && !('children' in role)\n  },\n\n  /**\n   * @method _isNewField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewField: function (roles) {\n    return Array.isArray(roles) && (typeof roles[0] === 'object')\n  },\n\n  /**\n   * @method _isOldField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldField: function (roles) {\n    return (Array.isArray(roles) && (typeof roles[0] === 'string')) || ((typeof roles === 'object') && !Array.isArray(roles))\n  },\n\n  /**\n   * @method _convertToNewRole\n   * @param {Object} oldRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewRole: function (oldRole) {\n    if (!(typeof oldRole.name === 'string')) throw new Error(\"Role name '\" + oldRole.name + \"' is not a string.\")\n\n    return {\n      _id: oldRole.name,\n      children: []\n    }\n  },\n\n  /**\n   * @method _convertToOldRole\n   * @param {Object} newRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldRole: function (newRole) {\n    if (!(typeof newRole._id === 'string')) throw new Error(\"Role name '\" + newRole._id + \"' is not a string.\")\n\n    return {\n      name: newRole._id\n    }\n  },\n\n  /**\n   * @method _convertToNewField\n   * @param {Array} oldRoles `Meteor.users` document `roles` field in the old format.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @return {Array} Converted `roles` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewField: function (oldRoles, convertUnderscoresToDots) {\n    var roles = []\n    if (Array.isArray(oldRoles)) {\n      oldRoles.forEach(function (role, index) {\n        if (!(typeof role === 'string')) throw new Error(\"Role '\" + role + \"' is not a string.\")\n\n        roles.push({\n          _id: role,\n          scope: null,\n          assigned: true\n        })\n      })\n    } else if (typeof oldRoles === 'object') {\n      Object.entries(oldRoles).forEach(([group, rolesArray]) => {\n        if (group === '__global_roles__') {\n          group = null\n        } else if (convertUnderscoresToDots) {\n          // unescape\n          group = group.replace(/_/g, '.')\n        }\n\n        rolesArray.forEach(function (role) {\n          if (!(typeof role === 'string')) throw new Error(\"Role '\" + role + \"' is not a string.\")\n\n          roles.push({\n            _id: role,\n            scope: group,\n            assigned: true\n          })\n        })\n      })\n    }\n    return roles\n  },\n\n  /**\n   * @method _convertToOldField\n   * @param {Array} newRoles `Meteor.users` document `roles` field in the new format.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @return {Array} Converted `roles` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldField: function (newRoles, usingGroups) {\n    var roles\n\n    if (usingGroups) {\n      roles = {}\n    } else {\n      roles = []\n    }\n\n    newRoles.forEach(function (userRole) {\n      if (!(typeof userRole === 'object')) throw new Error(\"Role '\" + userRole + \"' is not an object.\")\n\n      // We assume that we are converting back a failed migration, so values can only be\n      // what were valid values in 1.0. So no group names starting with $ and no subroles.\n\n      if (userRole.scope) {\n        if (!usingGroups) throw new Error(\"Role '\" + userRole._id + \"' with scope '\" + userRole.scope + \"' without enabled groups.\")\n\n        // escape\n        var scope = userRole.scope.replace(/\\./g, '_')\n\n        if (scope[0] === '$') throw new Error(\"Group name '\" + scope + \"' start with $.\")\n\n        roles[scope] = roles[scope] || []\n        roles[scope].push(userRole._id)\n      } else {\n        if (usingGroups) {\n          roles.__global_roles__ = roles.__global_roles__ || []\n          roles.__global_roles__.push(userRole._id)\n        } else {\n          roles.push(userRole._id)\n        }\n      }\n    })\n    return roles\n  },\n\n  /**\n   * @method _defaultUpdateUser\n   * @param {Object} user `Meteor.users` document.\n   * @param {Array|Object} roles Value to which user's `roles` field should be set.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateUser: function (user, roles) {\n    Meteor.users.update({\n      _id: user._id,\n      // making sure nothing changed in meantime\n      roles: user.roles\n    }, {\n      $set: { roles }\n    })\n  },\n\n  /**\n   * @method _defaultUpdateRole\n   * @param {Object} oldRole Old `Meteor.roles` document.\n   * @param {Object} newRole New `Meteor.roles` document.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateRole: function (oldRole, newRole) {\n    Meteor.roles.remove(oldRole._id)\n    Meteor.roles.insert(newRole)\n  },\n\n  /**\n   * @method _dropCollectionIndex\n   * @param {Object} collection Collection on which to drop the index.\n   * @param {String} indexName Name of the index to drop.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _dropCollectionIndex: function (collection, indexName) {\n    try {\n      collection._dropIndex(indexName)\n    } catch (e) {\n      if (e.name !== 'MongoError') throw e\n      if (!/index not found/.test(e.err || e.errmsg)) throw e\n    }\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the new format.\n   *\n   * @method _forwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate: function (updateUser, updateRole, convertUnderscoresToDots) {\n    updateUser = updateUser || Roles._defaultUpdateUser\n    updateRole = updateRole || Roles._defaultUpdateRole\n\n    Roles._dropCollectionIndex(Meteor.roles, 'name_1')\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isNewRole(role)) {\n        updateRole(role, Roles._convertToNewRole(role))\n      }\n    })\n\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isNewField(user.roles)) {\n        updateUser(user, Roles._convertToNewField(user.roles, convertUnderscoresToDots))\n      }\n    })\n  },\n\n  /**\n   * Moves the assignments from `Meteor.users` to `Meteor.roleAssignment`.\n   *\n   * @method _forwardMigrate2\n   * @param {Object} userSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate2: function (userSelector) {\n    userSelector = userSelector || {}\n    Object.assign(userSelector, { roles: { $ne: null } })\n\n    Meteor.users.find(userSelector).forEach(function (user, index) {\n      user.roles.filter((r) => r.assigned).forEach(r => {\n        // Added `ifExists` to make it less error-prone\n        Roles._addUserToRole(user._id, r._id, { scope: r.scope, ifExists: true })\n      })\n\n      Meteor.users.update({ _id: user._id }, { $unset: { roles: '' } })\n    })\n\n    // No need to keep the indexes around\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1')\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1')\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the old format.\n   *\n   * We assume that we are converting back a failed migration, so values can only be\n   * what were valid values in the old format. So no group names starting with `$` and\n   * no subroles.\n   *\n   * @method _backwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate: function (updateUser, updateRole, usingGroups) {\n    updateUser = updateUser || Roles._defaultUpdateUser\n    updateRole = updateRole || Roles._defaultUpdateRole\n\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1')\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1')\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isOldRole(role)) {\n        updateRole(role, Roles._convertToOldRole(role))\n      }\n    })\n\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isOldField(user.roles)) {\n        updateUser(user, Roles._convertToOldField(user.roles, usingGroups))\n      }\n    })\n  },\n\n  /**\n   * Moves the assignments from `Meteor.roleAssignment` back to to `Meteor.users`.\n   *\n   * @method _backwardMigrate2\n   * @param {Object} assignmentSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate2: function (assignmentSelector) {\n    assignmentSelector = assignmentSelector || {}\n\n    Meteor.users._ensureIndex({ 'roles._id': 1, 'roles.scope': 1 })\n    Meteor.users._ensureIndex({ 'roles.scope': 1 })\n\n    Meteor.roleAssignment.find(assignmentSelector).forEach(r => {\n      const roles = Meteor.users.findOne({ _id: r.user._id }).roles || []\n\n      const currentRole = roles.find(oldRole => oldRole._id === r.role._id && oldRole.scope === r.scope)\n      if (currentRole) {\n        currentRole.assigned = true\n      } else {\n        roles.push({\n          _id: r.role._id,\n          scope: r.scope,\n          assigned: true\n        })\n\n        r.inheritedRoles.forEach(inheritedRole => {\n          const currentInheritedRole = roles.find(oldRole => oldRole._id === inheritedRole._id && oldRole.scope === r.scope)\n\n          if (!currentInheritedRole) {\n            roles.push({\n              _id: inheritedRole._id,\n              scope: r.scope,\n              assigned: false\n            })\n          }\n        })\n      }\n\n      Meteor.users.update({ _id: r.user._id }, { $set: { roles } })\n      Meteor.roleAssignment.remove({ _id: r._id })\n    })\n  }\n})\n"]}